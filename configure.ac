## LibRelion

AC_INIT([relion], [1.3], [scheres@mrc-lmb.cam.ac.uk], [relion], [http://www.relion.org])
AM_INIT_AUTOMAKE([-Wall no-define])

# Define these substitions here to keep all version information in one place.
# For information on how to properly maintain the library version information,
# refer to the libtool manual, section "Updating library version information":
# http://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html
AC_SUBST([RELION_SO_VERSION], [1:3:0])
AC_SUBST([RELION_API_VERSION], [1.3])

# Generate two configuration headers; one for building the library itself with
# an autogenerated template, and a second one that will be installed alongside
# the library.
AC_PROG_CC
AM_PROG_CC_C_O
AC_PROG_CXX
AC_PROG_LIBTOOL

# Check for mpi headers
AC_ARG_ENABLE([mpi],
    AC_HELP_STRING([--enable-mpi],
        [compile with MPI support]),
    if test x$enableval = "xyes"; then
        AC_CHECK_PROGS(MPICXX, mpic++,)
        test -z "$MPICXX" &&  AC_MSG_ERROR([couldn't find mpi library for --enable-mpi])
        enable_mpi=$enableval
        CXX="$MPICXX"
        CPPFLAGS="$CPPFLAGS -fpic"
        dnl HAVE_MPI=1
        AC_DEFINE([HAVE_MPI], 1, [Use MPI])
    fi,
    [enable_mpi=no])
AM_CONDITIONAL(HAVE_MPI, test "$enable_mpi" = yes)

# Check for FFTW3
# Check for header <fftw3.h> AC_CHECK_HEADERS doesnt work, since we must
# use mpicc to get includes - cpp isnt always the same compiler.
AC_MSG_CHECKING([for fftw3.h])

AC_COMPILE_IFELSE(
[AC_LANG_PROGRAM([[#include <fftw3.h>]],)],
[
# ok, look for library files too
AC_MSG_RESULT(yes)
 AC_CHECK_LIB([fftw3],main,,AC_MSG_ERROR([Cannot find fftw3 library]))
 AC_CHECK_LIB([fftw3_threads],fftw_plan_with_nthreads,,AC_MSG_ERROR([Cannot find fftw3_threads library]))
 FFT_LIBS="-lfftw3_threads -lfftw3"
],[
# not ok, echo a warning
AC_MSG_ERROR([Cannot find the FFTW3 library. Please install it (with threads enabled) from http://www.fftw.org.])
])

#Check for FLTK
# as g++ seems needed and not gcc for compilation, 
#just check for presence of fltk-config program 
[fltkfile=`pwd`/bin/fltk-config]
AC_CHECK_FILE($fltkfile, 
[
enable_fltk=yes
], 
[
AC_MSG_RESULT(warning: bin/fltk-config was not found, so GUI will not be built)
enable_fltk=no
])
AM_CONDITIONAL(HAVE_FLTK, test "$enable_fltk" = yes)

# If no --prefix is passed to the configure script, relion programs and
# libraries will be installed under the current directory by default.
AC_PREFIX_DEFAULT(`pwd`)

# The "relion_" string is prepended by default to installed programs.
# It can be changed using --program-prefix=your_string
if test "x$program_prefix" = xNONE; then
  program_transform_name="s,^,relion_,"
fi

# Override the template file name of the generated .pc file, so that there
# is no need to rename the template file when the API version changes.
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_FILES([Makefile
	         relion-${RELION_API_VERSION}.pc:relion.pc.in])
AC_OUTPUT
